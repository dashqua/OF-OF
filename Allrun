#!/bin/bash

cd ${0%/*} || exit 1                        # Run from this directory
. $WM_PROJECT_DIR/bin/tools/RunFunctions    # Tutorial run functions

parallel=0
if [ "$1" = "-parallel" ]; then
    parallel=1
fi

# =============== Participant 1: Fluid ===========================
Participant1="Fluid"
Participant2="Solid"

    echo "Preparing the ${Participant1} participant..."
    cd $Participant1 
    echo "  Restoring 0/ from 0.orig/..."
        rm -rfv 0
        cp -r 0.orig 0
    cd ..

    echo "  Preparing meshes..."
    blockMesh -case ${Participant1} > ${Participant1}_blockMesh.log 2>&1
    checkMesh -case ${Participant1} > ${Participant1}_checkMesh.log 2>&1
    blockMesh -case ${Participant2} > ${Participant2}_blockMesh.log 2>&1
    checkMesh -case ${Participant2} > ${Participant2}_checkMesh.log 2>&1

    cd ${Participant1}
        Solver1=$(getApplication)    # solver
        echo "  ${Participant1} Solver: ${Solver1}."
    cd ..
    cd ${Participant2}
        Solver2=$(getApplication)    # solver
        echo "  ${Participant2} Solver: ${Solver2}."
    cd ..

    # run Fluid
    echo "  Starting the ${Participant1} participant in serial..."
    ${Solver1} -case ${Participant1} > ${Participant1}.log 2>&1 &
    PIDParticipant1=$!

    # Run Solid
    echo "  Starting the ${Participant2} participant..."
    ${Solver2} -case ${Participant2} > ${Participant2}.log 2>&1 &
    PIDParticipant2=$!

    exit 1

# =============== Wait for all the participants to finish =======
echo "Waiting for the participants to exit..., PIDs: ${PIDParticipant1}, ${PIDParticipant2}"
echo "(you may run 'tail -f ${Participant1}.log' in another terminal to check the progress)"

echo "To interrupt the simulation, press 'c'. Ctrl+C will only send the processes to the background."
while [ -e /proc/${PIDParticipant1} ]; do
    read -r -t1 -n1 input
    if [ "$input" = "c" ]; then
        kill ${PIDParticipant1}
        kill ${PIDParticipant2}
        false
    fi
done

if [ $? -ne 0 ] || [ "$(grep -c -E "error:" ${Participant1}.log)" -ne 0 ] || [ "$(grep -c -E "error:" ${Participant2}.log)" -ne 0 ]; then
    echo ""
    echo "Something went wrong... See the log files for more."
    # Precaution
    kill ${PIDParticipant1}
    kill ${PIDParticipant2}
else
    echo ""
    echo "The simulation completed! (check for any errors)"
    if [ $parallel -eq 1 ]; then
        echo "Reconstructing fields..."
        reconstructPar -case ${Participant1} > ${Participant1}_reconstructPar.log 2>&1 & 
    fi

    # Workaround for issue #26
    echo "Problems with time directories without results? Run the script removeObsoleteFolders.sh and see issue #26 on GitHub."
    # ./removeObsoleteFolders.sh
    
    echo "You may now open '${Participant1}/${Participant1}.foam' in ParaView."
    # Note: ".foam" triggers the native OpenFOAM reader of ParaView.
    # Change to ".OpenFOAM" to use the OpenFOAM reader provided with OpenFOAM.
fi

echo ""
echo "### NOTE ### Make sure to use the correct solver for your OpenFOAM version! (pimpleFoam for OpenFOAM v1806, OpenFOAM 6, or newer, vs pimpleDyMFoam for older) You may change this in your Fluid/system/controlDict file, if needed."
